# -*- coding: utf-8 -*-
"""MIPS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UVj2JqGzt5-7rptS4jsyA6WFV5Qfk91n
"""

opcode_dict = { "add" : '1',
               "or" : '2',
                "bne" : '3',
               "sw" : '4',
               "beq" : '5',
               "subi" : '6',
               "lw" : '7',
               "andi" : '8',
               "nor" : '9',
               "ori" : '10',
               "sub" : '11',
               "srl" : '12',
               "and" : '13',
               "sll" : '14',
               "addi" : '15'
               }

reg_dict = { "$zero" : '0',
            "$t0" : '1',
            "$t1" : '2',
            "$t2" : '3',
            "$t3" : '4',
            "$t4" : '5',
            "$sp" : '6',
            "$t5" : '7'
            }

#for storing position of all labels
label_dict = {}

#a helper function for taking hex value
def myhex(x):
  x = int(x) & (2**32-1) #2's complement form
  return hex(x).replace('0x',"")


R_format = ["add","sub","and","or","nor"]
I_format = [["addi","subi","andi","ori","sll","srl"],["bne","beq"],["sw","lw"]]
J_format = ["j"]

def mips_encoding(opcode,reglist,ofile,pc):
    rformat={"opcode":'0',"rs":'0',"rt":'0',"rd":'0',"sa":'0'}
    iformat={"opcode":'0',"rs":'0',"rt":'0',"address":'00'}
    jformat = {"opcode":'0',"address":'00','blank':'00'}
    if opcode in R_format: #add,sub,and,or,nor
        rformat["rd"] = reg_dict[reglist[0]]
        rformat["rs"] = reg_dict[reglist[1]]
        rformat["rt"] = reg_dict[reglist[2]]
        
        encoding = rformat

    # elif opcode in R_format[1]: #sll,srl
    #     rformat["rd"] = reg_dict[reglist[0]]
    #     rformat["rt"] = reg_dict[reglist[1]]
    #     rformat["sa"] = myhex(reglist[2])

    #     encoding = rformat

    elif opcode in I_format[0]: #addi,subi,andi,ori,bne,beq,sll,srl
        iformat["rt"] = reg_dict[reglist[0]]
        iformat["rs"] = reg_dict[reglist[1]]
        iformat["address"] = myhex(reglist[2])
        while len(iformat["address"])<2:
          iformat["address"] = '0' + iformat["address"]
        iformat["address"] = iformat["address"][-2:]
          
        encoding = iformat
    
    elif opcode in I_format[1]: #bne,beq
        iformat["rt"] = reg_dict[reglist[0]]
        iformat["rs"] = reg_dict[reglist[1]]
        print('#'*25)
        print(label_dict[reglist[2]], pc)
        iformat["address"] = myhex(int(label_dict[reglist[2]]-pc-1))
        while len(iformat["address"])<2:
          iformat["address"] = '0' + iformat["address"]
        iformat["address"] = iformat["address"][-2:]
          
        encoding = iformat

    elif opcode in I_format[2]: #sw,lw
        iformat["address"] = myhex(reglist[1].split('(',1)[0])    #'255($t0)' -->   myhex(255)  --> 'ff'
        while len(iformat["address"])<2:
          iformat["address"] = '0' + iformat["address"]
        iformat["address"] = iformat["address"][-2:]
        iformat["rt"] = reg_dict[reglist[0]]
        iformat["rs"] = reg_dict[reglist[1].split('(',1)[1].replace(")","")]

        encoding = iformat

    elif opcode in J_format:
        jformat["address"] = myhex(label_dict[reglist[0]])
        while len(jformat["address"])<2:
          jformat["address"] = '0' + jformat["address"]
        jformat["address"] = jformat["address"][-2:]
        encoding = jformat

    encoding["opcode"] = myhex(opcode_dict[opcode])

    ofile.write("\n")
    for x in encoding.values():
      ofile.write(x)
    return encoding

path_of_inputfile = "input.asm"
outputfile = open("output.bin", "w")
outputfile.write("v2.0 raw")

#making stack commands into regular commands
with open(path_of_inputfile,'r') as inputfile:
  new_inputfile = open("input_modified.asm",'w')
  # line = "addi $sp,$zero,255\n"
  # new_inputfile.write(line)

  for line in inputfile:
    if line=="\n":
      continue
    if ":" in line: #making labels inline
      line_without_ws = line.replace(" ","")
      if ":\n" in line_without_ws:
        new_inputfile.write(line.rstrip("\n"))
        continue

    if '//' in line: #removing comments
      line = line.split("//",1)[0] + '\n'
    
    if "bneq" in line: #bneq --> bne
      line = line.replace("bneq","bne")

    if 'push' in line:
      if '(' in line : #push 3($t0)
          part2 = line.split(" ",1)[1].rstrip() #3($t0)
          value = part2.split("(",1)[0] #3
          reg = part2.split("(",1)[1].replace(")","") #$t0
          line = "lw $t5"+","+value+"("+reg+")" + "\n" + "sw $t5"+",0($sp)" + "\n" + "subi $sp,$sp,1\n"
      else:   #push $t0
          reg = line.split(" ",1)[1].rstrip() #$t0
          line = "sw "+reg+",0($sp)" + "\n" + "subi $sp,$sp,1\n"
    elif 'pop' in line: #pop $t0
      reg = line.split(" ",1)[1].rstrip() #$t0
      line = "addi $sp,$sp,1" + "\n" + "lw "+reg+",0($sp)\n"
    new_inputfile.write(line)

  inputfile.close()
  new_inputfile.close()


#saving all label locations in labeldict and deleting "label:" from the file
with open("input_modified.asm",'r') as inputfile:
  new_inputfile = open("input_modified2.asm",'w')
  idx=1
  for line in inputfile:
    if ':' in line:
        label = line.split(':',1)[0].replace(" ","")
        label_dict[label] = idx
        line = line.split(':',1)[1].lstrip()
    
    new_inputfile.write(line)
    idx+=1

  inputfile.close()
  new_inputfile.close()


#main
with open("input_modified2.asm",'r') as inputfile:
  idx=0
  for line in inputfile:
    opcode = line.split(" ",1)[0]
    reglist = line.split(" ",1)[1].replace(" ","").replace("\n","").split(',')
    encoding = mips_encoding(opcode,reglist,outputfile,idx)

    print(idx, " : " ,line, " ==> ", encoding)
    print('\n')

    idx+=1

inputfile.close()
outputfile.close()

